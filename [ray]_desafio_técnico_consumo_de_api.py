# -*- coding: utf-8 -*-
"""[RAY] Desafio Técnico - Consumo de API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wESXynPQgr0iQrG49Mjb-uTdRN5syYLX
"""

# Instalando o modo de cliente da API
!pip install --upgrade google-api-python-client

# Iniciando o cliente para interação com a API
from googleapiclient.discovery import build

# Armazenando a chave da API criada
api_key = "AIzaSyAcvW_D_B9KcjxexdiqyPnhGfDrLXg8lbo"

# Dando permissão para fazer as consultas
youtube = build("youtube", "v3", developerKey=api_key)

# Extraindo os vídeos da playlist do youtube de Highlights das Corridas
id_playlist = "PLfoNZDHitwjUv0pjTwlV1vzaE0r7UDVDR"
nextPage_token = None

# Criando a lista em que as informações dos videos serão armazenadas
videos_playlist = []

# Buscando as informações dos vídeos da playlist
videos = youtube.playlistItems().list(part='snippet', playlistId = id_playlist, maxResults = 24).execute()

# Armazenando os videos na playlist
videos_playlist = videos['items']
print(videos_playlist)

# Buscando e armazenando o ID de cada vídeo para acessar suas estatísticas
id_videos = []
for video in videos_playlist:
    id_videos.append(video['snippet']['resourceId']['videoId'])

print(id_videos)

# Buscando e armazenando as estatísticas de cada vídeo
info = []

for id in id_videos:
    video = youtube.videos().list(part='statistics', id=id).execute()
    info.extend(video['items'])

print(info)

# Extraindo e armazenando os títulos
titulo_videos = []
for video in videos_playlist:
    titulo_videos.append(video['snippet']['title'])

print(titulo_videos)

# Extraindo e armazenando as visualizações
visualizacoes_videos = []

for video in info:
    visualizacoes_videos.append(int(video['statistics']['viewCount']))

print(visualizacoes_videos)

# Importando a biblioteca Pandas para criar um dataframe com o título do vídeo e as visualizações
import pandas as pd

df_videos = pd.DataFrame({'Vídeo' : titulo_videos, "Visualizações" : visualizacoes_videos})

df_videos

df_videos.info()

# Ordenando o dataframe pelas visualizações de maneira descendente

df_videos = df_videos.sort_values(by='Visualizações', ascending = False)

df_videos = df_videos.reset_index(drop=True)

df_videos

